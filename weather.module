<?php

/*
 * Implements hook_menu().
 */
function weather_menu() {
  $items = array();

  $items['admin/config/content/weather/settings'] = array(
    'title' => 'Weather Module Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weather_admin_settings_form'),
    'file' => 'includes/weather.admin.inc',
    'access arguments' => array('administer site configuration'),
  );

  $items['weather/form'] = array(
    'title' => 'Weather Submission Form',
    'page callback' => 'weather_submission_form',
    'file' => 'includes/weather.form.inc',
    'access arguments' => array('administer site configuration'),
  );

  $items['weather/results/%'] = array(
    'title' => 'Weather Results',
    'page callback' => 'weather_results_show',
    'page arguments' => array(2),
    'file' => 'includes/weather.results.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['weather/saved'] = array(
    'title' => 'Weather Forecasts',
    'page callback' => 'weather_saved_forecasts',
    'file' => 'includes/weather.saved.inc',
    'access arguments' => array('administer site configuration'),
  );

  $items['weather/single/%'] = array(
    'title' => 'Weather Forecast',
    'page callback' => 'weather_forecast_single',
    'page arguments' => array(2),
    'file' => 'includes/weather.single.inc',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/*
 * Implements hook_theme().
 */

function weather_theme() {
  return array(
    'weather_forecast_day' => array(
      'template' => 'templates/weather_forecast_day',
      'variables' => array('data' => NULL),
    ),
    'weather_forecast_single' => array(
      'template' => 'templates/weather_forecast_single',
      'variables' => array('data' => NULL),
    )
  );
}

/*
 * Implements hook_node_info().
 */
function weather_node_info() {
  $items = array(
    'weather_log_entry' => array(
      'name' => t('Weather Log Entry'),
      'base' => 'node_content',
      'description' => '',
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/*
 * Implements hook_node_view().
 */
function weather_node_view($node) {

  $sunrise = $node->field_sunrise['und'][0]['value'];
  $sunset = $node->field_sunset['und'][0]['value'];
  $hours_diff = strtotime($sunset) - strtotime($sunrise);
  $hours_of_daylight = gmdate('G', $hours_diff) . " hours and " . gmdate('i', $hours_diff) . " minutes";

  $node->content['hours_of_daylight'] = array(
    '#type' => 'markup',
    '#markup' => $hours_of_daylight,
    '#title' => 'Hours of daylight',
  );

}

/*
 * Implements hook_block_info().
 */
function weather_block_info() {
  $blocks['weather_yesterday'] = array(
    'info' => t('Weather Module Yesterday'),
    'status' => 1
  );

  $blocks['weather_tomorrow'] = array(
    'info' => t('Weather Module Tomorrow'),
    'status' => 1
  );

  return $blocks;
}

/**
 * Implements hook_block_info_alter().
 */
function weather_block_info_alter(&$blocks, $theme, $code_blocks) {
  if (isset($blocks['weather']['weather_yesterday'])) {
    $blocks['weather']['weather_yesterday']['region'] = 'sidebar_second';
  }
  if (isset($blocks['weather']['weather_tomorrow'])) {
    $blocks['weather']['weather_tomorrow']['region'] = 'sidebar_second';
  }
}

/*
 * Implements hook_block_view().
 */
function weather_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'weather_yesterday':
      $today_date = menu_get_object()->field_date[LANGUAGE_NONE][0]['value'];

      $yesterday = strtotime("-1 day", strtotime(get_date_hyphen($today_date)));

      // Find yesterday's node

      $yesterday_query = new EntityFieldQuery();

      $yesterday_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'weather_log_entry')
        ->fieldCondition('field_date', 'value', format_date($yesterday, 'custom', 'd/m/Y'), '=')
        ->fieldCondition('field_location', 'tid', menu_get_object()->field_location[LANGUAGE_NONE][0]['tid'], '=');

      $yesterday_query_result = $yesterday_query->execute();

      if (isset($yesterday_query_result['node'])) {
        $yesterday_array_shift = array_shift($yesterday_query_result);

        $yesterday_node_id = array_shift($yesterday_array_shift)->nid;

        $yesterday_node_data = node_load($yesterday_node_id);

        $hours_of_daylight = calculate_hours_daylight($yesterday_node_id);

        $hours_of_daylight_formatted = gmdate("G", $hours_of_daylight) . ' hours and ' . gmdate("i", $hours_of_daylight) . ' minutes';
        $yesterday_image = theme('image', array(
          'path' => $yesterday_node_data->field_weather_icon[LANGUAGE_NONE][0]['uri'],
          'attributes' => NULL
        ));
        $yesterday_sunrise = $yesterday_node_data->field_sunrise[LANGUAGE_NONE][0]['value'];
        $yesterday_sunset = $yesterday_node_data->field_sunset[LANGUAGE_NONE][0]['value'];
      }
      else {
        // We need to create a request - Since yesterday has not been stored
        $form_state = array();
        $current_node_loc_tid = menu_get_object()->field_location[LANGUAGE_NONE][0]['tid'];
        $form_state['values']['weather_town_city'] = taxonomy_term_load($current_node_loc_tid)->name;
        $form_state['values']['weather_days_forecast'] = 1;
        $form_state['values']['weather_date'] = 2;
        $form_state['values']['weather_date_custom']['year'] = format_date($yesterday, 'custom', 'Y');
        $form_state['values']['weather_date_custom']['month'] = format_date($yesterday, 'custom', 'm');
        $form_state['values']['weather_date_custom']['day'] = format_date($yesterday, 'custom', 'd');
        $form_state['values']['weather_current_conditions'] = TRUE;
        $form_state['values']['weather_hourly_reporting'] = 3;
        // First check which API to use
        // Current Weather API only has coverage for:
        // 2 days before now -> 4 days after now
        // Past Weather API has coverage for:
        // More than 2 days before now
        if ($yesterday < strtotime("-2 days")) {
          // Is yesterday a longer time ago than 2 days before now? If yes, use the Past Weather API
          $new_request_response = weather_make_request($form_state, 'past');
        }
        else {
          // Is yesterday in the future or nearer than 2 before now? If yes, use the Current Weather API
          $new_request_response = weather_make_request($form_state, 'future');
        }
        $yesterday_image = theme('image', array(
          'path' => $new_request_response['data']['weather'][0]['hourly'][0]['weatherIconUrl'][0]['value'],
          'attributes' => NULL
        ));
        $yesterday_sunrise = $new_request_response['data']['weather'][0]['astronomy'][0]['sunrise'];
        $yesterday_sunset = $new_request_response['data']['weather'][0]['astronomy'][0]['sunset'];
        $hours_of_daylight = calculate_hours_daylight_v($yesterday_sunrise, $yesterday_sunset);
        $hours_of_daylight_formatted = gmdate("G", $hours_of_daylight) . ' hours and ' . gmdate("i", $hours_of_daylight) . ' minutes';
      }

      $block['subject'] = t('Yesterday\'s ' . menu_get_object()->title . ' (' . format_date($yesterday, 'custom', 'd/m/Y') . ')');
      $block['content'] = array(
        '#markup' => $yesterday_image . '<br />Sunrise: ' . $yesterday_sunrise . '<br />
                    Sunset: ' . $yesterday_sunset . '<br />
                    Hours of daylight: ' . $hours_of_daylight_formatted,
      );
      break;
    case 'weather_tomorrow':
      $today_date = menu_get_object()->field_date[LANGUAGE_NONE][0]['value'];

      $tomorrow = strtotime("+1 day", strtotime(get_date_hyphen($today_date)));

      // Find yesterday's node

      $tomorrow_query = new EntityFieldQuery();

      $tomorrow_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'weather_log_entry')
        ->fieldCondition('field_date', 'value', format_date($tomorrow, 'custom', 'd/m/Y'), '=')
        ->fieldCondition('field_location', 'tid', menu_get_object()->field_location[LANGUAGE_NONE][0]['tid'], '=');

      $tomorrow_query_result = $tomorrow_query->execute();

      if (isset($tomorrow_query_result['node'])) {
        $tomorrow_array_shift = array_shift($tomorrow_query_result);

        $tomorrow_node_id = array_shift($tomorrow_array_shift)->nid;

        $tomorrow_node_data = node_load($tomorrow_node_id);

        $hours_of_daylight = calculate_hours_daylight($tomorrow_node_id);

        $hours_of_daylight_formatted = gmdate("G", $hours_of_daylight) . ' hours and ' . gmdate("i", $hours_of_daylight) . ' minutes';
        $tomorrow_image = theme('image', array(
          'path' => $tomorrow_node_data->field_weather_icon[LANGUAGE_NONE][0]['uri'],
          'attributes' => NULL
        ));
        $tomorrow_sunrise = $tomorrow_node_data->field_sunrise[LANGUAGE_NONE][0]['value'];
        $tomorrow_sunset = $tomorrow_node_data->field_sunset[LANGUAGE_NONE][0]['value'];
      }
      else {
        // We need to create a request - Since yesterday has not been stored
        $form_state = array();
        $current_node_loc_tid = menu_get_object()->field_location[LANGUAGE_NONE][0]['tid'];
        $form_state['values']['weather_town_city'] = taxonomy_term_load($current_node_loc_tid)->name;
        $form_state['values']['weather_days_forecast'] = 1;
        $form_state['values']['weather_date'] = 2;
        $form_state['values']['weather_date_custom']['year'] = format_date($tomorrow, 'custom', 'Y');
        $form_state['values']['weather_date_custom']['month'] = format_date($tomorrow, 'custom', 'm');
        $form_state['values']['weather_date_custom']['day'] = format_date($tomorrow, 'custom', 'd');
        $form_state['values']['weather_current_conditions'] = TRUE;
        $form_state['values']['weather_hourly_reporting'] = 3;
        // First check which API to use
        // Current Weather API only has coverage for:
        // 2 days before now -> 4 days after now
        // Past Weather API has coverage for:
        // More than 2 days before now
        if ($tomorrow < strtotime("-2 days")) {
          // Is yesterday a longer time ago than 2 days before now? If yes, use the Past Weather API
          $new_request_response = weather_make_request($form_state, 'past');
        }
        else {
          // Is yesterday in the future or nearer than 2 before now? If yes, use the Current Weather API
          $new_request_response = weather_make_request($form_state, 'future');
        }
        $tomorrow_image = theme('image', array(
          'path' => $new_request_response['data']['weather'][0]['hourly'][0]['weatherIconUrl'][0]['value'],
          'attributes' => NULL
        ));
        $tomorrow_sunrise = $new_request_response['data']['weather'][0]['astronomy'][0]['sunrise'];
        $tomorrow_sunset = $new_request_response['data']['weather'][0]['astronomy'][0]['sunset'];
        $hours_of_daylight = calculate_hours_daylight_v($tomorrow_sunrise, $tomorrow_sunset);
        $hours_of_daylight_formatted = gmdate("G", $hours_of_daylight) . ' hours and ' . gmdate("i", $hours_of_daylight) . ' minutes';
      }
      $block['subject'] = t('Tomorrow\'s ' . menu_get_object()->title . '<br />(' . format_date($tomorrow, 'custom', 'd/m/Y') . ')');
      $block['content'] = array(
        '#markup' => $tomorrow_image . '<br />Sunrise: ' . $tomorrow_sunrise . '<br />
                    Sunset: ' . $tomorrow_sunset . '<br />
                    Hours of daylight: ' . $hours_of_daylight_formatted,
      );
      break;
  }

  return $block;
}

/*
 * Global functions
 */

function weather_make_request(&$form_state, $past_or_future) {
  $location_name = $form_state['values']['weather_town_city'];
  $days_to_forecast = $form_state['values']['weather_days_forecast'];
  $api_key = variable_get('weather_api_key_field');
  if ($past_or_future == 'past') {
    $api_url = variable_get('weather_api_past_url_field');
  }
  else {
    $api_url = variable_get('weather_api_url_field');
  }
  $date_selection = $form_state['values']['weather_date'];
  $date_year = $form_state['values']['weather_date_custom']['year'];
  $date_month = $form_state['values']['weather_date_custom']['month'];
  $date_day = $form_state['values']['weather_date_custom']['day'];
  $current_conditions = $form_state['values']['weather_current_conditions'];
  $hourly_intervals = $form_state['values']['weather_hourly_reporting'];

  $options = "q=" . $location_name;

  $options .= "&format=json";

  $options .= "&key=" . $api_key;

  $options .= "&num_of_days=" . $days_to_forecast;

  if ($date_selection == 0) {
    // Today
    $options .= "&date=today";
  }
  elseif ($date_selection == 1) {
    $options .= "&date=tomorrow";
  }
  else {
    $options .= "&date=" . $date_year . "-" . $date_month . "-" . $date_day;
  }

  $options .= "&tp=" . $hourly_intervals;

  if ($current_conditions) {
    $options .= "&cc=yes";
  }
  else {
    $options .= "&cc=no";
  }

  $cache_options = md5($options);

  if (!empty(cache_get('weather_api_options_cache_id_' . $cache_options)->data)) {

    $response = cache_get('weather_api_options_cache_id_' . $cache_options)->data;

  }
  else {

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $api_url . $options);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_PROXY, '10.23.12.110:8080');
    $response_init = curl_exec($ch);
    curl_close($ch);

    $response = drupal_json_decode($response_init);

    cache_set('weather_api_options_cache_id_' . $cache_options, $response);

    cache_set('weather_api_options_cache_id_num_of_days_' . $cache_options, $days_to_forecast);

  }

  $response['options_cache_id'] = $cache_options;

  return $response;
}

function get_date_hyphen($input) {

  // Expects input format to be d/m/Y e.g 01/01/2015

  return str_replace('/', '-', $input);

}

function calculate_hours_daylight($node_id) {
  $node = node_load($node_id);
  $sunrise = $node->field_sunrise[LANGUAGE_NONE][0]['value'];
  $sunset = $node->field_sunset[LANGUAGE_NONE][0]['value'];
  return strtotime($sunset) - strtotime($sunrise);
}

function calculate_hours_daylight_v($sunrise, $sunset) {
  return strtotime($sunset) - strtotime($sunrise);
}